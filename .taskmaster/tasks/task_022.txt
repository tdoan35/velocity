# Task ID: 22
# Title: Implement Flexible PRD System with Multi-Agent Collaboration and Real-time Sync
# Status: done
# Dependencies: 17, 20, 21
# Priority: medium
# Description: Overhaul the PRD system to support flexible document structure, multi-agent collaboration, and real-time synchronization between the PRD editor and conversation agents. Critical issues identified: PRD content not automatically saved during conversation, frontend context gaps (missing prdId), and PRD content not included in system prompts for proper agent context.
# Details:
## Implementation Details

### Critical Issues to Address First

1. **PRD Content Persistence Gap**: The conversation function detects PRD intent (detectPRDIntent at line 701) but doesn't automatically save content gathered through conversation - agent provides guidance but actual PRD content isn't persisted.

2. **Frontend Context Gap**: The useAIChatStream hook doesn't pass prdId in context object (line 269) when sending messages, even when PRD exists for the project.

3. **System Prompt Context Missing**: The conversation function fetches PRD but only includes ID and section in context (lines 200-201), not actual PRD content for agent context.

### Frontend Implementation Requirements

1. **ProjectDesign.tsx Updates**
   - Pass PRD ID to chat interface when PRD exists for the project
   - Ensure chat component receives PRD context for proper agent behavior

2. **useAIChatStream.ts Enhancement** (Line 269)
   - Include prdId in context payload when sending messages to conversation function
   - Ensure context object properly passes PRD reference for backend processing

3. **NotionPRDEditor.tsx Integration**
   - Trigger sync notifications when content is saved via prdService.autoSavePRD()
   - Notify active conversations when PRD is manually edited
   - Integrate manual edits with conversation context updates

### Backend Implementation Requirements

1. **conversation/index.ts Critical Changes**
   - Lines 170-204: Always fetch full PRD content when projectId exists, not just on PRD intent detection
   - Lines 499-690: Update buildSystemPrompt to include full PRD content (overview, features, etc.) not just metadata
   - Add automatic PRD section updates when agent collects sufficient information for a section

2. **Database Schema Migration**
   - Since project is pre-launch with no existing user data, implement new flexible structure directly
   - Current fixed columns to migrate: overview, core_features, additional_features, technical_requirements, success_metrics
   - Add JSONB sections column:
   ```sql
   ALTER TABLE prds 
   ADD COLUMN sections JSONB DEFAULT '[]'::jsonb;
   ```
   - Define section schema: `id`, `title`, `order`, `agent`, `required`, `content`, `status`, `isCustom`
   - Create new migration: supabase/migrations/20250107_create_prd_tables.sql

3. **Agent-Specific Section Configuration**
   - Define default section assignments:
   ```typescript
   const AGENT_SECTION_MAPPING = {
     'project-manager': [
       { title: 'Overview', required: true },
       { title: 'Core Features', required: true },
       { title: 'Additional Features', required: false }
     ],
     'design-assistant': [
       { title: 'UI Design Guidance/Patterns', required: true },
       { title: 'User Experience Flows', required: true }
     ],
     'engineering-assistant': [
       { title: 'Technical Architecture', required: true }
     ],
     'config-helper': [
       { title: 'Tech Integrations', required: true }
     ]
   };
   ```
   - Implement guided sequence: Project Manager → Design Assistant → Engineering Assistant → Config Helper

4. **PRD Management Edge Function Updates** (prd-management/index.ts)
   - Refactor to handle flexible JSONB structure
   - Implement CRUD operations for sections
   - Add validation for agent-assigned required sections
   - Create section templates and completion tracking

5. **prdService.ts Updates** (frontend/src/services/prdService.ts)
   - Update service methods to work with new JSONB structure
   - Maintain compatibility with current autoSavePRD() functionality
   - Add methods for section-specific operations

### Real-time Sync Implementation

1. **Bidirectional Sync Service**
   ```typescript
   class PRDSyncService {
     constructor(prdId) {
       this.prdId = prdId;
       this.setupRealtimeSubscription();
     }
     
     async updateSection(sectionId, content) {
       // Update section and notify subscribers
     }
   }
   ```
   - Implement Supabase realtime subscriptions for live updates
   - Add debounced updates and conflict resolution
   - Create event system for UI component notifications

2. **PRD Editor Component Updates**
   - Enhance TipTap-based editor for flexible structure
   - Implement drag-drop reordering with react-beautiful-dnd
   - Add section creation/deletion UI with agent assignment options
   - Real-time updates using Supabase subscriptions

### Key Files to Modify
- supabase/functions/conversation/index.ts (lines 170-204, 499-690)
- supabase/functions/prd-management/index.ts
- frontend/src/hooks/useAIChatStream.ts (line 269)
- frontend/src/pages/ProjectDesign.tsx
- frontend/src/components/prd/NotionPRDEditor.tsx
- frontend/src/services/prdService.ts
- supabase/migrations/20250107_create_prd_tables.sql

# Test Strategy:
## Test Strategy

### Critical Issues Testing

1. **PRD Content Persistence Testing**
   - Verify conversation agents automatically save gathered PRD content to sections
   - Test that PRD content persists across conversation sessions
   - Validate that manual PRD edits are reflected in subsequent conversations
   - Test auto-save functionality during conversation interactions

2. **Frontend Context Integration Testing**
   - Verify prdId is included in context payload from useAIChatStream.ts (line 269)
   - Test that ProjectDesign.tsx correctly passes PRD context to chat interface
   - Validate that NotionPRDEditor sync notifications work correctly
   - Test bidirectional updates between editor and conversation

3. **System Prompt Context Testing**
   - Verify full PRD content is included in conversation system prompts
   - Test that agents have proper context of existing PRD content
   - Validate agent responses reference current PRD state appropriately
   - Test conversation context assembly with complete PRD data

### Database Schema Testing
   - Verify JSONB schema migration with existing fixed column data
   - Test section CRUD operations through the API
   - Validate order maintenance during section reordering
   - Test concurrent updates to ensure data integrity
   - Benchmark performance with large PRD documents

### Agent-Specific Section Testing
   - Verify default section creation for each agent type
   - Test required vs optional section validation
   - Validate section assignment to correct agents
   - Test custom section creation and management
   - Test guided flow sequence: Project Manager → Design Assistant → Engineering Assistant → Config Helper

### Real-time Sync Testing
   - Test bidirectional updates between editor and conversation
   - Simulate network latency and verify sync resilience
   - Test conflict resolution for simultaneous edits
   - Verify conversation context includes latest PRD data
   - Test with multiple simultaneous users editing the same PRD

### UI Component Testing
   - Test drag-drop reordering with agent-assigned sections
   - Validate section creation, deletion, and editing workflows
   - Test agent assignment UI and functionality
   - Verify responsive behavior on different screen sizes
   - Test integration with existing NotionPRDEditor component

### End-to-End Testing
   - Test complete PRD creation following guided agent flow
   - Verify entire conversation-to-editor-to-conversation workflow
   - Test migration from current fixed structure to flexible JSONB
   - Validate all integrations work with prdService.ts updates
   - Test performance under various PRD complexity scenarios

### Regression Testing
   - Verify existing PRD functionality continues with new structure
   - Test integration with version history system (Task 21)
   - Validate PRD export and sharing features
   - Test notifications and collaboration features
   - Ensure no breaking changes to current user workflows

# Subtasks:
## 1. Fix Critical PRD Content Persistence and Context Issues [done]
### Dependencies: None
### Description: Address the three critical issues: PRD content not being saved during conversation, frontend context gaps, and missing PRD content in system prompts.
### Details:
- Fix conversation/index.ts (lines 170-204) to always fetch full PRD content when projectId exists
- Update buildSystemPrompt (lines 499-690) to include complete PRD content in agent context
- Add automatic PRD section updates when agents collect sufficient information
- Fix useAIChatStream.ts (line 269) to include prdId in context payload
- Update ProjectDesign.tsx to pass PRD ID to chat interface when PRD exists
- Integrate NotionPRDEditor.tsx with sync notifications via prdService.autoSavePRD()
- Test that agents now have full PRD context and can reference existing content

## 2. Implement Flexible PRD Database Schema with JSONB [done]
### Dependencies: 22.1
### Description: Create new JSONB-based flexible section structure since project is pre-launch with no existing user data to migrate.
### Details:
- Create new migration supabase/migrations/20250107_create_prd_tables.sql for JSONB structure
- Add sections JSONB column with default empty array to prds table
- Define section schema with properties: id, title, order, agent, required, content, status, isCustom
- Migrate existing fixed columns (overview, core_features, additional_features, technical_requirements, success_metrics) to JSONB structure
- Implement database triggers for maintaining section order integrity
- Add validation constraints for required section properties
- Create database functions for section CRUD operations

## 3. Configure Agent-Specific Default Sections [done]
### Dependencies: 22.2
### Description: Implement the default section configuration system with agent-specific assignments and guided handoff sequence.
### Details:
- Define default section mappings for each agent type:
  * Project Manager: Overview (required), Core Features (required), Additional Features (optional)
  * Design Assistant: UI Design Guidance/Patterns (required), User Experience Flows (required)
  * Engineering Assistant: Technical Architecture (required)
  * Config Helper: Tech Integrations (required)
- Implement guided agent sequence: Project Manager → Design Assistant → Engineering Assistant → Config Helper
- Create section templates with agent-specific content guidance
- Implement logic for custom section creation beyond defaults
- Add section reordering functionality that preserves agent assignments
- Create agent introduction prompts that explain their assigned sections

## 4. Update PRD Management Edge Functions and Services [done]
### Dependencies: 22.2, 22.3
### Description: Refactor prd-management edge functions and prdService.ts to handle the flexible structure, including CRUD operations for sections and validation logic.
### Details:
- Refactor prd-management/index.ts to work with JSONB structure
- Update prdService.ts to maintain compatibility with autoSavePRD() while adding section operations
- Implement CRUD operations for sections (add, update, delete, reorder)
- Add validation logic for required sections based on agent assignments
- Create section templates for standard PRD components
- Implement section completion tracking and status updates
- Add error handling for invalid section operations
- Create API endpoints for section management with agent context

## 5. Enhance PRD Editor Component for Flexible Structure [done]
### Dependencies: 22.4
### Description: Update the TipTap-based PRD editor to support the flexible section structure with drag-and-drop reordering, section creation/deletion, and real-time updates.
### Details:
- Enhance NotionPRDEditor.tsx to support flexible sections while maintaining current functionality
- Implement drag-and-drop reordering using react-beautiful-dnd
- Add section creation/deletion UI with confirmation dialogs
- Create section type selector with agent assignment options
- Implement section status indicators and progress tracking
- Add custom section creation workflow beyond agent defaults
- Create UI for managing section properties and agent assignments
- Implement visual indicators for required vs optional sections
- Add agent-specific styling and icons for section identification
- Integrate with existing prdService.autoSavePRD() functionality
<info added on 2025-08-12T00:18:30.206Z>
Based on the user request and task context, here is the new implementation detail to add:

## Identified Integration Issues and Required Code Changes:

**Critical Frontend Fixes:**
- Update useAIChatStream.ts line 269 to include prdId in context object for proper PRD linkage
- Modify ProjectDesign.tsx line 383 to pass complete PRD object to chat interface after data fetching
- Add sync notification trigger in NotionPRDEditor.tsx line 279 after autoSavePRD calls to notify conversation system of changes

**Backend Service Updates:**
- Refactor conversation/index.ts line 174 to always fetch PRD content when projectId exists, removing dependency on intent detection
- Update conversation/index.ts lines 194-201 to store complete PRD content in context instead of just prdId reference
- Enhance system prompt generation (lines 658-669) to include actual PRD section content for agent context
- Implement auto-save logic when sufficient information is gathered for PRD sections

**Real-time Sync Enhancements:**
- Add websocket notifications in prd-management/index.ts for PRD update broadcasts
- Ensure all PRD service responses return full content structure, not just metadata

**Database Migration Notes:**
- Current schema columns to migrate: overview, core_features, additional_features, technical_requirements, success_metrics
- No existing user data impact due to pre-launch status, enabling direct migration approach
</info added on 2025-08-12T00:18:30.206Z>
<info added on 2025-08-12T00:19:02.917Z>
Based on analyzing the user request and existing subtask context, here is the new implementation detail to add:

## Critical Code-Level Integration Requirements:

**Frontend Synchronization Logic:**
- Modify useAIChatStream.ts line 269: Change context object from `{projectId, conversationId}` to `{projectId, conversationId, prdId: prd?.id}` for proper PRD linkage
- Update ProjectDesign.tsx line 383: After PRD data fetch completion, pass full PRD object as prop to EnhancedChatInterface component instead of just project data
- Enhance NotionPRDEditor.tsx line 279: Implement sync event emission after prdService.autoSavePRD() calls using `window.dispatchEvent(new CustomEvent('prdUpdated', {detail: {prdId, sections}}))` to notify conversation system

**Backend Service Integration:**
- Refactor conversation/index.ts line 174: Replace conditional `if (isPRDRelated)` with `if (projectId)` to ensure PRD context is always fetched when project exists
- Update conversation/index.ts lines 186-189: Force 'get' action instead of intent-based detection for consistent PRD retrieval
- Modify conversation/index.ts lines 194-201: Store complete PRD object in context as `prdContext: prdData.prd` rather than just `prdId: prdData.prd.id`
- Enhance system prompt generation lines 658-669: Include actual PRD section content in prompt template: `Current PRD Content: Overview: ${JSON.stringify(prdContext.overview)}, Core Features: ${JSON.stringify(prdContext.core_features)}` for all dynamic sections

**Real-time Bidirectional Sync:**
- Implement Supabase realtime broadcast in prd-management/index.ts after every PRD update operation with channel `prd_changes:${projectId}`
- Add conversation_id tracking in all PRD service functions for coordinated updates between editor and chat
- Ensure all PRD service responses return complete section content structure, not metadata-only responses

**Integration Testing Requirements:**
- Verify PRD editor changes immediately reflect in active conversations without page refresh
- Validate conversation-driven PRD updates trigger editor re-render with new content
- Test concurrent editing scenarios between chat and editor interfaces
</info added on 2025-08-12T00:19:02.917Z>

## 6. Implement Bidirectional Sync and Multi-Agent Flow [done]
### Dependencies: 22.1, 22.4, 22.5
### Description: Create comprehensive sync service and guided multi-agent conversation flow with proper section management and real-time synchronization.
### Details:
- Create PRDSyncService to handle updates from both editor and conversation
- Implement Supabase realtime subscriptions for live updates
- Add debounced updates to prevent excessive database operations
- Implement conflict resolution for simultaneous edits
- Create event system for notifying UI components of changes
- Implement agent introduction system where each agent explains their assigned sections
- Create handoff logic that suggests the next agent in sequence
- Develop context-aware prompts that reference current section progress
- Implement agent transition validation to ensure required sections are addressed
- Add conversation state tracking to maintain agent flow progress


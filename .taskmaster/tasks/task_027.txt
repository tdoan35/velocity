# Task ID: 27
# Title: Implement Editor/Preview Page for Velocity
# Status: pending
# Dependencies: 26, 4, 3, 2, 20
# Priority: high
# Description: Create a full-stack development environment with a four-panel layout that provides code editing, real-time preview, file exploration, and AI assistance for both frontend and backend development with Supabase integration.
# Details:
## Implementation Details

1. **Route Setup and Authentication**
   - Create a new route `/project/:id/editor` in the application router
   - Implement authentication middleware to verify user access
   - Add project ownership validation using Supabase RLS policies
   - Set up route parameters and query handling for initial file selection

2. **Four-Panel Responsive Layout**
   - Implement a responsive grid layout with four main panels:
     - File Explorer (left): Collapsible, resizable panel
     - Code Editor (center-left): Monaco-based editor with tabs
     - Live Preview (center-right): Device simulation with Appetize.io
     - AI Assistant (right): Collapsible, context-aware helper
   - Use CSS Grid with responsive breakpoints for different screen sizes
   - Implement panel resizing with drag handles using react-resizable
   - Add panel collapse/expand functionality with state persistence

3. **Enhanced File Explorer Integration**
   - Extend existing FileExplorer component to support both frontend and backend files
   - Implement file type categorization (Frontend/Backend/Config)
   - Add visual indicators for file types and status (modified, new, etc.)
   - Implement context menus for file operations (create, rename, delete)
   - Add drag-and-drop functionality for file organization

4. **Monaco Editor Integration**
   - Configure Monaco editor for multiple language support:
     - JavaScript/TypeScript for React Native
     - SQL for database operations
     - JSON for configuration files
   - Implement syntax highlighting and IntelliSense for all supported languages
   - Add file type detection and appropriate editor configuration
   - Implement auto-save functionality with debouncing
   - Add keyboard shortcuts for common operations

5. **Real-Time Preview System**
   - Integrate with Appetize.io for mobile preview (leveraging Task #4)
   - Implement hot reload functionality for frontend changes
   - Create backend preview system for API and database operations
   - Develop preview refresh mechanism with minimal latency
   - Add preview device selection and orientation controls
   - Implement preview error handling and status indicators

6. **Supabase Backend Integration**
   - Create database schema editor with visual and code views
   - Implement Edge Function development environment
   - Add real-time database browser with CRUD operations
   - Create API testing panel with request/response visualization
   - Implement SQL query editor with execution capabilities
   - Add database migration management tools

7. **AI-Powered Code Generation**
   - Integrate existing Claude AI system (from Task #3)
   - Enhance context awareness with current file and project structure
   - Implement code suggestion and completion features
   - Add full-stack code generation with frontend-backend coordination
   - Create AI assistant panel with conversation history
   - Implement code explanation and documentation generation

8. **Performance Optimization**
   - Implement code splitting and lazy loading for editor components
   - Add caching for preview generation to reduce rebuild time
   - Optimize file operations with batched updates
   - Implement efficient state management with Zustand
   - Add background processing for resource-intensive operations
   - Create performance monitoring and reporting system

9. **Deployment Pipeline Integration**
   - Add one-click deployment capabilities for frontend and backend
   - Implement deployment configuration management
   - Create deployment history and rollback functionality
   - Add environment variable management for different stages
   - Implement deployment status monitoring and notifications

10. **User Experience Enhancements**
    - Add keyboard shortcuts for common operations
    - Implement user preferences for editor and preview settings
    - Create onboarding tooltips for first-time users
    - Add progress indicators for long-running operations
    - Implement error handling with user-friendly messages
    - Create session persistence for editor state

# Test Strategy:
## Test Strategy

1. **Unit Testing Core Components**
   - Test route authentication and authorization with various user scenarios
   - Verify panel layout responsiveness across different screen sizes
   - Test file explorer operations (create, rename, delete, move)
   - Validate Monaco editor configuration for different file types
   - Test AI assistant context awareness and response quality
   - Verify Supabase integration for database and Edge Function operations

2. **Integration Testing**
   - Test end-to-end workflow from code editing to preview generation
   - Verify hot reload functionality for frontend and backend changes
   - Test file synchronization between explorer and editor
   - Validate AI code generation with subsequent preview updates
   - Test database operations from schema changes to preview updates
   - Verify deployment pipeline from editor to live environment

3. **Performance Testing**
   - Measure page load time (target: < 2 seconds)
   - Test hot reload latency (target: < 1 second)
   - Verify editor responsiveness with large files
   - Measure preview generation time for complex applications
   - Test system performance with multiple panels active
   - Validate memory usage during extended editing sessions

4. **User Experience Testing**
   - Conduct usability testing with different user personas
   - Test accessibility compliance (WCAG 2.1 AA)
   - Verify keyboard navigation and shortcuts
   - Test error handling and recovery scenarios
   - Validate session persistence across page reloads
   - Measure user session retention (target: > 80% after 10 minutes)

5. **Cross-Browser and Device Testing**
   - Test on major browsers (Chrome, Firefox, Safari, Edge)
   - Verify functionality on different operating systems
   - Test on various screen sizes and resolutions
   - Validate touch interactions on touch-enabled devices
   - Test with different network conditions (fast, slow, intermittent)

6. **Security Testing**
   - Verify authentication and authorization mechanisms
   - Test for common vulnerabilities (XSS, CSRF)
   - Validate secure handling of API keys and credentials
   - Test rate limiting and abuse prevention
   - Verify data isolation between different users and projects

7. **Acceptance Criteria Validation**
   - Verify all key requirements are implemented and functional
   - Test code generation accuracy (target: > 85%)
   - Validate user session retention (target: > 80% after 10 minutes)
   - Verify uptime and reliability (target: 99.5%)
   - Test integration with existing components and systems

# Subtasks:
## 1. Route Setup and Page Infrastructure [pending]
### Dependencies: None
### Description: Implement authentication, routing, and basic page structure for the editor/preview page
### Details:
Begin by reading the implementation plan (docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md) and architecture documents. Focus on Phase 1, Week 1-2 (lines 10-45) to implement the route `/project/:id/editor` with authentication middleware, project ownership validation using Supabase RLS policies, and route parameter handling. Create the basic four-panel responsive layout structure with CSS Grid and implement panel resizing with react-resizable. Set up state management with Zustand for editor state persistence.
<info added on 2025-08-22T23:17:58.147Z>
Updated subtask 27.1 with the requested documentation references and corrected section numbers.
</info added on 2025-08-22T23:17:58.147Z>

## 2. Enhanced File Explorer for Full-Stack [pending]
### Dependencies: 27.1
### Description: Extend the existing FileExplorer component to support both frontend and backend files
### Details:
Review the implementation plan sections on File Explorer (lines 50-75) and extend the existing FileExplorer component to support both frontend and backend files. Implement file type categorization (Frontend/Backend/Config) with visual indicators for file types and status. Add context menus for file operations (create, rename, delete) and implement drag-and-drop functionality for file organization. Create folder structure for backend files including database schemas, edge functions, and API routes.
<info added on 2025-08-22T23:18:13.009Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on section 1.2 Enhanced File Explorer (lines 236-244) of the implementation plan and Architecture section 4 File System & Project Management (lines 143-206) for full-stack project structure. Then extend the existing FileExplorer component to support both frontend and backend files. Implement file type categorization (Frontend/Backend/Config) with visual indicators for file types and status. Add context menus for file operations (create, rename, delete) and implement drag-and-drop functionality for file organization. Create folder structure for backend files including database schemas, edge functions, and API routes.
</info added on 2025-08-22T23:18:13.009Z>

## 3. Enhanced Editor Container with Backend Support [pending]
### Dependencies: 27.1, 27.2
### Description: Configure Monaco editor for multiple language support including SQL and backend JavaScript/TypeScript
### Details:
Following the implementation plan (lines 80-110), configure Monaco editor for multiple language support including JavaScript/TypeScript for React Native, SQL for database operations, and JSON for configuration files. Implement syntax highlighting and IntelliSense for all supported languages. Add file type detection and appropriate editor configuration based on file extension. Implement auto-save functionality with debouncing and add keyboard shortcuts for common operations.
<info added on 2025-08-22T23:18:29.944Z>
Looking at the user request, I need to generate new text that starts with the specific phrase and then continues with the existing details. The user wants me to prepend specific instructions about reading documentation files.

First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on section 1.3 Enhanced Editor Container (lines 245-263) of the implementation plan. Then configure Monaco editor for multiple language support including JavaScript/TypeScript for React Native, SQL for database operations, and JSON for configuration files. Implement syntax highlighting and IntelliSense for all supported languages. Add file type detection and appropriate editor configuration based on file extension. Implement auto-save functionality with debouncing and add keyboard shortcuts for common operations.
</info added on 2025-08-22T23:18:29.944Z>

## 4. Backend File Management Components [pending]
### Dependencies: 27.2, 27.3
### Description: Create specialized components for managing database schemas, edge functions, and API routes
### Details:
Based on the implementation plan (lines 115-145), create database schema editor with visual and code views. Implement Edge Function development environment with appropriate templates and scaffolding. Add real-time database browser with CRUD operations and create API testing panel with request/response visualization. Implement SQL query editor with execution capabilities and add database migration management tools.
<info added on 2025-08-22T23:18:44.320Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on Phase 2: Supabase Backend Integration sections 2.1-2.3 (lines 256-318) of the implementation plan and Architecture section 5 Enhanced Preview System (lines 208-232). Then create database schema editor with visual and code views. Implement Edge Function development environment with appropriate templates and scaffolding. Add real-time database browser with CRUD operations and create API testing panel with request/response visualization. Implement SQL query editor with execution capabilities and add database migration management tools.
</info added on 2025-08-22T23:18:44.320Z>

## 5. Full-Stack Preview Panel Integration [pending]
### Dependencies: 27.3, 27.4
### Description: Implement preview system for both frontend and backend components
### Details:
Following the implementation plan (lines 150-180), integrate with Appetize.io for mobile preview. Implement preview system for backend components including API endpoints and database operations. Create unified preview panel that can switch between frontend and backend views. Add preview device selection and orientation controls for frontend and request method selection for backend. Implement preview error handling and status indicators.
<info added on 2025-08-22T23:18:59.635Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on Phase 3: Enhanced Preview System sections 3.1-3.3 (lines 319-379) of the implementation plan and Architecture section 5 (lines 208-232) for preview system details. Then integrate with Appetize.io for mobile preview. Implement preview system for backend components including API endpoints and database operations. Create unified preview panel that can switch between frontend and backend views. Add preview device selection and orientation controls for frontend and request method selection for backend. Implement preview error handling and status indicators.
</info added on 2025-08-22T23:18:59.635Z>

## 6. Hot Reload Enhancement for Backend [pending]
### Dependencies: 27.4, 27.5
### Description: Implement hot reload functionality for backend changes including database schemas and edge functions
### Details:
Based on the implementation plan (lines 185-210), develop hot reload functionality for backend changes. Implement efficient change detection for database schemas and edge functions. Create preview refresh mechanism with minimal latency for backend components. Add background compilation and deployment for edge functions during development. Implement database schema change detection and migration generation.
<info added on 2025-08-22T23:19:13.844Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on section 3.2 Hot Reload Enhancement (lines 337-365) of the implementation plan. Then develop hot reload functionality for backend changes. Implement efficient change detection for database schemas and edge functions. Create preview refresh mechanism with minimal latency for backend components. Add background compilation and deployment for edge functions during development. Implement database schema change detection and migration generation.
</info added on 2025-08-22T23:19:13.844Z>

## 7. Error Handling and Debugging Console [pending]
### Dependencies: 27.5, 27.6
### Description: Implement comprehensive error handling and debugging tools for both frontend and backend development
### Details:
Following the implementation plan (lines 215-240), create unified error handling system for both frontend and backend errors. Implement debugging console with log visualization and filtering capabilities. Add error highlighting in code editor with quick-fix suggestions. Create error notification system with severity levels and actionable feedback. Implement runtime inspection tools for both frontend and backend components.
<info added on 2025-08-22T23:19:26.857Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on section 3.3 Error Handling and Debugging (lines 366-379) of the implementation plan. Then create unified error handling system for both frontend and backend errors. Implement debugging console with log visualization and filtering capabilities. Add error highlighting in code editor with quick-fix suggestions. Create error notification system with severity levels and actionable feedback. Implement runtime inspection tools for both frontend and backend components.
</info added on 2025-08-22T23:19:26.857Z>

## 8. AI Assistant Integration for Full-Stack [pending]
### Dependencies: 27.3, 27.4
### Description: Enhance the AI assistant to provide context-aware help for both frontend and backend development
### Details:
Based on the implementation plan (lines 245-275), integrate existing Claude AI system with enhanced context awareness for both frontend and backend files. Implement code suggestion and completion features for all supported languages. Add full-stack code generation with frontend-backend coordination. Create AI assistant panel with conversation history and implement code explanation and documentation generation capabilities.
<info added on 2025-08-22T23:19:42.133Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on Phase 4: AI-Powered Full-Stack Development sections 4.1-4.2 (lines 380-417) of the implementation plan and Architecture section 3 AI-Powered Code Generation Workflow (lines 114-142). Then integrate existing Claude AI system with enhanced context awareness for both frontend and backend files. Implement code suggestion and completion features for all supported languages. Add full-stack code generation with frontend-backend coordination. Create AI assistant panel with conversation history and implement code explanation and documentation generation capabilities.
</info added on 2025-08-22T23:19:42.133Z>

## 9. Code Generation Templates and Patterns [pending]
### Dependencies: 27.8
### Description: Implement code generation templates and patterns for common full-stack development scenarios
### Details:
Following the implementation plan (lines 280-310), create code generation templates for common full-stack patterns such as CRUD operations, authentication flows, and data visualization. Implement template customization based on project requirements and user preferences. Add code snippet library with categorization and search functionality. Create guided code generation wizards for complex patterns with frontend-backend integration.
<info added on 2025-08-22T23:19:55.800Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on section 4.2 Code Generation Templates (lines 405-417) of the implementation plan. Then create code generation templates for common full-stack patterns such as CRUD operations, authentication flows, and data visualization. Implement template customization based on project requirements and user preferences. Add code snippet library with categorization and search functionality. Create guided code generation wizards for complex patterns with frontend-backend integration.
</info added on 2025-08-22T23:19:55.800Z>

## 10. Security Implementation [pending]
### Dependencies: 27.1, 27.4
### Description: Implement security features for the editor/preview page including access control and secure data handling
### Details:
Based on the implementation plan (lines 315-340), implement fine-grained access control for editor features based on user roles and permissions. Add secure handling of sensitive data such as API keys and environment variables. Implement secure communication between frontend and backend components. Create security scanning for code vulnerabilities and implement secure deployment pipeline with environment isolation.
<info added on 2025-08-22T23:20:25.843Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on Security & Performance Considerations section (lines 419-473) of the implementation plan and Architecture section 11 Security and Performance (lines 441-460). Then implement fine-grained access control for editor features based on user roles and permissions. Add secure handling of sensitive data such as API keys and environment variables. Implement secure communication between frontend and backend components. Create security scanning for code vulnerabilities and implement secure deployment pipeline with environment isolation.
</info added on 2025-08-22T23:20:25.843Z>

## 11. Performance Optimization [pending]
### Dependencies: 27.5, 27.6, 27.7
### Description: Optimize editor/preview page performance for both frontend and backend operations
### Details:
Following the implementation plan (lines 345-375), implement code splitting and lazy loading for editor components to reduce initial load time. Add caching for preview generation to reduce rebuild time. Optimize file operations with batched updates and implement efficient state management with Zustand. Add background processing for resource-intensive operations and create performance monitoring and reporting system.
<info added on 2025-08-22T23:20:39.569Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on Performance Optimization sections (lines 448-473) of the implementation plan and Architecture Performance section (lines 452-460). Then implement code splitting and lazy loading for editor components to reduce initial load time. Add caching for preview generation to reduce rebuild time. Optimize file operations with batched updates and implement efficient state management with Zustand. Add background processing for resource-intensive operations and create performance monitoring and reporting system.
</info added on 2025-08-22T23:20:39.569Z>

## 12. Testing and Validation [pending]
### Dependencies: 27.1, 27.2, 27.3, 27.4, 27.5, 27.6, 27.7, 27.8, 27.9, 27.10, 27.11
### Description: Implement comprehensive testing and validation for the editor/preview page
### Details:
Based on the implementation plan (lines 380-410), implement unit tests for all core components using Jest and React Testing Library. Add integration tests for editor-preview interaction and backend integration. Create end-to-end tests for complete user workflows using Cypress. Implement automated accessibility testing with axe-core and add performance benchmarking for critical operations. Create test fixtures for various project types and configurations.
<info added on 2025-08-22T23:20:53.335Z>
First, read both docs/implementation-plans/editor-preview-page-implementation-plan-2025-01-22.md and docs/feature-plans/editor-preview-page-architecture.md for complete context. Focus on Testing Strategy section (lines 474-523) of the implementation plan and Success Metrics section (lines 461-478) of the architecture document. Then implement unit tests for all core components using Jest and React Testing Library. Add integration tests for editor-preview interaction and backend integration. Create end-to-end tests for complete user workflows using Cypress. Implement automated accessibility testing with axe-core and add performance benchmarking for critical operations. Create test fixtures for various project types and configurations.
</info added on 2025-08-22T23:20:53.335Z>


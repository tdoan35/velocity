# Task ID: 20
# Title: Implement PRD Editor with TipTap Rich Text Integration
# Status: done
# Dependencies: 14, 17
# Priority: medium
# Description: Integrate TipTap rich text editor into the ProjectDesign page to create a comprehensive PRD editor that replaces the chat interface in the left panel when toggled, with section-based navigation and auto-save functionality.
# Details:
1. **TipTap Editor Installation and Configuration**
   - Install TipTap editor packages: `@tiptap/react`, `@tiptap/starter-kit`, `@tiptap/extension-placeholder`, and other necessary extensions
   - Configure TypeScript types and create custom type definitions as needed
   - Set up editor with shadcn/ui styling to maintain design consistency
   - Implement custom extensions for PRD-specific formatting needs

2. **PRDEditor Component Development**
   - Create a new `PRDEditor` component that fills the left resizable panel
   - Implement section-based navigation with the following structure:
     - Overview
     - Core Features
     - Additional Features
     - Technical Requirements
     - Success Metrics
   - Add section jump functionality with smooth scrolling
   - Implement section completion tracking for status indicators
   - Create custom toolbar with formatting options relevant to PRD creation

3. **PRD Service Implementation**
   - Develop PRD service with Supabase integration for CRUD operations
   - Implement auto-save functionality with debounce (save after 1.5s of inactivity)
   - Create versioning system to track PRD changes over time
   - Add PRD metadata storage (creation date, last modified, status)
   - Implement content validation to ensure required sections are completed

4. **Project Manager Agent Card Enhancement**
   - Update Project Manager agent card to include "View PRD" toggle button
   - Add visual indicator when PRD exists for the current project
   - Implement toggle state management to switch between chat and PRD views
   - Create smooth transition animations between views

5. **View State Management**
   - Implement state management for switching between chat and PRD editor views
   - Use Zustand store to manage view state across components
   - Ensure proper state persistence during navigation
   - Handle resize events to maintain optimal editor experience

6. **PRD Content Rendering in Chat**
   - Create `PRDContentCard` component for rendering PRD content in chat messages
   - Implement distinct visual styling for PRD content in chat
   - Add collapsible sections for better readability
   - Include edit button to quickly switch to editor mode

7. **PRD Context Integration**
   - Modify conversation context assembly to include PRD content
   - Fetch existing PRD and add to initial context for new conversations
   - Implement selective PRD section inclusion based on conversation topic
   - Add PRD reference capability in AI responses

8. **PRD Status Indicator Component**
   - Create PRD status indicator showing completion percentage
   - Implement status tracking (draft/in-progress/review/finalized)
   - Add visual progress indicators for each section
   - Include tooltips with completion suggestions

9. **Export Functionality**
   - Implement PDF export using a library like jsPDF or react-pdf
   - Add Markdown export functionality
   - Create export settings dialog for customization options
   - Implement export progress indicators for large documents

10. **Collaborative Editing Support**
    - Implement basic version history tracking
    - Add user attribution for changes
    - Set up foundation for future real-time collaborative editing
    - Create conflict resolution strategy for concurrent edits

# Test Strategy:
1. **Unit Testing TipTap Integration**
   - Test TipTap editor initialization and configuration
   - Verify custom extensions function correctly
   - Test editor state management and content persistence
   - Validate TypeScript integration and type safety

2. **Component Testing**
   - Test PRDEditor component rendering and interaction
   - Verify section navigation works correctly
   - Test toolbar functionality and formatting options
   - Validate responsive behavior in different viewport sizes
   - Ensure proper integration with the left panel container

3. **PRD Service Testing**
   - Test CRUD operations with Supabase
   - Verify auto-save functionality with various timing scenarios
   - Test version history tracking and retrieval
   - Validate error handling during save/load operations
   - Test concurrent edit scenarios and conflict resolution

4. **UI Integration Testing**
   - Test toggle button functionality in Project Manager agent card
   - Verify visual indicators update correctly based on PRD state
   - Test transitions between chat and PRD editor views
   - Validate state persistence during navigation

5. **Content Rendering Testing**
   - Test PRDContentCard rendering in chat messages
   - Verify formatting is preserved when displaying PRD content
   - Test collapsible sections and interaction
   - Validate edit functionality from rendered content

6. **Context Integration Testing**
   - Verify PRD content is correctly included in conversation context
   - Test AI responses with PRD context for accuracy and relevance
   - Validate selective inclusion of PRD sections based on conversation topic
   - Test performance with large PRD documents

7. **Status Indicator Testing**
   - Test completion percentage calculation accuracy
   - Verify status updates based on content changes
   - Test visual indicators for different completion states
   - Validate tooltips and guidance functionality

8. **Export Testing**
   - Test PDF export with various PRD content structures
   - Verify Markdown export formatting and accuracy
   - Test export settings customization
   - Validate large document export performance

9. **End-to-End Testing**
   - Create comprehensive test scenarios covering the entire PRD workflow
   - Test from creation to finalization with multiple edits
   - Verify integration with other project components
   - Test with different user roles and permissions

10. **Accessibility Testing**
    - Verify keyboard navigation throughout the PRD editor
    - Test screen reader compatibility
    - Validate color contrast and visual accessibility
    - Ensure all interactive elements are properly accessible

# Subtasks:
## 1. Install and configure TipTap editor packages with TypeScript integration [done]
### Dependencies: None
### Description: Install TipTap editor packages (@tiptap/react, @tiptap/starter-kit, @tiptap/extension-placeholder, and related extensions) and configure TypeScript types to integrate with the existing shadcn/ui design system.
### Details:
1. Install TipTap packages: @tiptap/react, @tiptap/starter-kit, @tiptap/extension-placeholder, @tiptap/extension-document, @tiptap/extension-paragraph, @tiptap/extension-text, @tiptap/extension-bold, @tiptap/extension-italic, @tiptap/extension-heading, @tiptap/extension-bullet-list, @tiptap/extension-ordered-list, @tiptap/extension-list-item using npm/yarn. 2. Create type definitions in src/types/tiptap.ts for PRD-specific editor configuration and content structure. 3. Configure TipTap editor with shadcn/ui styling by creating custom CSS classes that match the existing theme variables and design system. 4. Set up editor extensions configuration that will be used by the PRDEditor component, focusing on PRD-specific formatting needs like headings, lists, and structured content sections.

## 2. Create PRDEditor component with section-based navigation [done]
### Dependencies: 20.1
### Description: Develop a comprehensive PRDEditor component that integrates TipTap editor with section-based navigation for PRD structure (Overview, Core Features, Additional Features, Technical Requirements, Success Metrics).
### Details:
1. Create src/components/prd/PRDEditor.tsx component that fills the left resizable panel (similar to EnhancedChatInterface). 2. Implement section-based navigation with predefined PRD structure: Overview, Core Features, Additional Features, Technical Requirements, Success Metrics. 3. Add section jump functionality with smooth scrolling behavior using React refs and scroll methods. 4. Implement section completion tracking with visual indicators (progress bars, checkmarks). 5. Create custom toolbar with formatting options relevant to PRD creation (headings, lists, bold, italic, etc.). 6. Ensure the component integrates seamlessly with the existing ResizablePanel structure in ProjectDesign.tsx. 7. Add proper TypeScript interfaces for PRD content structure and section metadata.

## 3. Implement PRD service with Supabase integration and auto-save [done]
### Dependencies: 20.2
### Description: Develop a comprehensive PRD service that handles CRUD operations with Supabase, implements auto-save functionality with debounce, and manages PRD versioning and metadata.
### Details:
1. Create src/services/prdService.ts with full CRUD operations using Supabase client (similar to existing conversationService.ts structure). 2. Design and implement database schema for PRD storage including: prds table (id, project_id, user_id, title, content, metadata, version, status, created_at, updated_at). 3. Implement auto-save functionality with 1.5-second debounce using useCallback and useEffect hooks. 4. Create versioning system to track PRD changes over time with version comparison capabilities. 5. Add PRD metadata storage including creation date, last modified timestamp, completion status per section. 6. Implement content validation to ensure required sections are completed with appropriate feedback. 7. Add error handling and retry mechanisms for network failures during save operations.

## 4. Enhance Project Manager agent card with PRD toggle functionality [done]
### Dependencies: 20.3
### Description: Update the Project Manager agent card in the right panel to include PRD view toggle functionality with visual indicators and smooth transition animations between chat and PRD views.
### Details:
1. Modify the Project Manager agent card in ProjectDesign.tsx (lines 737-757) to include a 'View PRD' toggle button next to the existing content. 2. Add visual indicator (badge, icon, or status dot) when PRD exists for the current project by checking PRD service. 3. Implement toggle state management using React useState to switch between chat and PRD editor views in the left panel. 4. Create smooth transition animations using framer-motion (already available) for switching between EnhancedChatInterface and PRDEditor components. 5. Add visual feedback for active state (similar to existing ring-2 ring-emerald-500 styling). 6. Ensure the toggle state is maintained during component re-renders and navigation. 7. Add tooltips explaining the PRD functionality for better UX.

## 5. Implement view state management with Zustand store integration [done]
### Dependencies: 20.4
### Description: Create comprehensive view state management using Zustand store to handle switching between chat and PRD editor views, with proper state persistence and resize event handling.
### Details:
1. Create src/stores/usePRDStore.ts using Zustand (following existing store patterns like useAppStore.ts) to manage PRD editor state including: current view mode (chat/prd), PRD content, auto-save status, section completion tracking. 2. Implement view state management for switching between EnhancedChatInterface and PRDEditor in the left ResizablePanel of ProjectDesign.tsx. 3. Add state persistence using Zustand persist middleware to maintain view preferences across browser sessions. 4. Handle resize events to maintain optimal editor experience by integrating with existing ResizablePanel components. 5. Create selectors for efficient component re-rendering when only specific PRD state changes. 6. Add state synchronization between PRD editor content and Supabase backend through the PRD service. 7. Implement proper cleanup and reset functionality when switching projects or logging out.


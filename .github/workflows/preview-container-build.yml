name: Preview Container Build and Push

on:
  push:
    branches: [main, master]
    paths:
      - 'orchestrator/preview-container/**'
      - '.github/workflows/preview-container-build.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'orchestrator/preview-container/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/velocity-preview-container

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Velocity Preview Container
          org.opencontainers.image.description=Container runtime for Velocity app previews
          org.opencontainers.image.vendor=Velocity
          org.opencontainers.image.source=https://github.com/${{ github.repository }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./orchestrator/preview-container
        file: ./orchestrator/preview-container/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate image digest summary
      run: |
        echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "Tags: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "Digest: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "Build completed at: $(date)" >> $GITHUB_STEP_SUMMARY

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  update-orchestrator-env:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Update container image reference
      run: |
        # Extract the latest image digest
        IMAGE_DIGEST="${{ needs.build-and-push.outputs.image-digest }}"
        IMAGE_TAG="main-${{ github.sha }}"
        
        # Update the orchestrator environment file with the new image reference
        sed -i "s|PREVIEW_CONTAINER_IMAGE=.*|PREVIEW_CONTAINER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" orchestrator/.env
        
        echo "Updated PREVIEW_CONTAINER_IMAGE to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"

    - name: Create Pull Request with updated image reference
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update preview container image reference"
        title: "Auto-update: Preview container image reference"
        body: |
          ## Container Image Update
          
          Automatically updating the preview container image reference after successful build.
          
          - **New Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}`
          - **Commit**: ${{ github.sha }}
          - **Build Time**: $(date)
          
          This PR was auto-generated by the preview-container-build workflow.
        branch: auto-update/preview-container-${{ github.sha }}
        delete-branch: true

  notify-deployment:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Create deployment notification
      run: |
        STATUS="${{ needs.build-and-push.result == 'success' && needs.security-scan.result == 'success' && '✅ Success' || '❌ Failed' }}"
        
        echo "## 🚀 Preview Container Deployment" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: $STATUS" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "**Security Scan**: ${{ needs.security-scan.result == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY